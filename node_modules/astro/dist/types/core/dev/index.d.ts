/// <reference types="node" />
import type http from 'http';
import type { AstroConfig, ManifestData, RouteCache, RouteData } from '../../@types/astro';
import type { LogOptions } from '../logger';
import type { HmrContext, ModuleNode } from '../vite';
import connect from 'connect';
import vite from '../vite.js';
export interface DevOptions {
    logging: LogOptions;
}
export interface DevServer {
    hostname: string;
    port: number;
    server: connect.Server;
    stop(): Promise<void>;
}
/** `astro dev` */
export default function dev(config: AstroConfig, options?: DevOptions): Promise<DevServer>;
/** Dev server */
export declare class AstroDevServer {
    app: connect.Server;
    config: AstroConfig;
    devRoot: string;
    hostname: string;
    httpServer: http.Server | undefined;
    logging: LogOptions;
    manifest: ManifestData;
    mostRecentRoute?: RouteData;
    origin: string;
    port: number;
    routeCache: RouteCache;
    site: URL | undefined;
    url: URL;
    viteServer: vite.ViteDevServer | undefined;
    constructor(config: AstroConfig, options: DevOptions);
    start(): Promise<void>;
    stop(): Promise<void>;
    handleHotUpdate({ file, modules }: HmrContext): Promise<void | ModuleNode[]>;
    /** Expose dev server to this.port */
    listen(devStart: number): Promise<void>;
    private createViteServer;
    /** The primary router (runs before Vite, in case we need to modify or intercept anything) */
    private handleRequest;
    /** Render error page */
    private renderError;
}
