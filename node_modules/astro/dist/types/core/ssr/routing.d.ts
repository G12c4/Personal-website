import type { AstroConfig, ComponentInstance, GetStaticPathsResult, ManifestData, Params, RouteData } from '../../@types/astro';
import type { LogOptions } from '../logger';
/**
 * given an array of params like `['x', 'y', 'z']` for
 * src/routes/[x]/[y]/[z]/svelte, create a function
 * that turns a RegExpExecArray into ({ x, y, z })
 */
export declare function getParams(array: string[]): (match: RegExpExecArray) => Params;
/** Find matching route from pathname */
export declare function matchRoute(pathname: string, manifest: ManifestData): RouteData | undefined;
/** Throw error for deprecated/malformed APIs */
export declare function validateGetStaticPathsModule(mod: ComponentInstance): void;
/** Throw error for malformed getStaticPaths() response */
export declare function validateGetStaticPathsResult(result: GetStaticPathsResult, logging: LogOptions): void;
/** Create manifest of all static routes */
export declare function createRouteManifest({ config, cwd }: {
    config: AstroConfig;
    cwd?: string;
}, logging: LogOptions): ManifestData;
