import type vite from '../vite';
import type { AstroConfig, ComponentInstance, Params, Props, Renderer, RouteCache, RouteData, RuntimeMode } from '../../@types/astro';
import type { LogOptions } from '../logger';
interface SSROptions {
    /** an instance of the AstroConfig */
    astroConfig: AstroConfig;
    /** location of file on disk */
    filePath: URL;
    /** logging options */
    logging: LogOptions;
    /** "development" or "production" */
    mode: RuntimeMode;
    /** production website, needed for some RSS & Sitemap functions */
    origin: string;
    /** the web request (needed for dynamic routes) */
    pathname: string;
    /** optional, in case we need to render something outside of a dev server */
    route?: RouteData;
    /** pass in route cache because SSR canâ€™t manage cache-busting */
    routeCache: RouteCache;
    /** Vite instance */
    viteServer: vite.ViteDevServer;
}
export declare type ComponentPreload = [Renderer[], ComponentInstance];
export declare function preload({ astroConfig, filePath, viteServer }: SSROptions): Promise<ComponentPreload>;
export declare function getParamsAndProps({ route, routeCache, logging, pathname, mod, validate, }: {
    route: RouteData | undefined;
    routeCache: RouteCache;
    pathname: string;
    mod: ComponentInstance;
    logging: LogOptions;
    validate?: boolean;
}): Promise<[Params, Props]>;
/** use Vite to SSR */
export declare function render(renderers: Renderer[], mod: ComponentInstance, ssrOpts: SSROptions): Promise<string>;
export declare function ssr(ssrOpts: SSROptions): Promise<string>;
export {};
