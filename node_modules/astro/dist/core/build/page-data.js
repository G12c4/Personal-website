import { fileURLToPath } from "url";
import * as colors from "kleur/colors";
import { debug } from "../logger.js";
import { preload as ssrPreload } from "../ssr/index.js";
import { validateGetStaticPathsModule, validateGetStaticPathsResult } from "../ssr/routing.js";
import { generateRssFunction } from "../ssr/rss.js";
import { assignStaticPaths } from "../ssr/route-cache.js";
async function collectPagesData(opts) {
  const { astroConfig, logging, manifest, origin, routeCache, viteServer } = opts;
  const assets = {};
  const allPages = {};
  await Promise.all(manifest.routes.map(async (route) => {
    var _a, _b;
    if (route.pathname) {
      allPages[route.component] = {
        route,
        paths: [route.pathname],
        preload: await ssrPreload({
          astroConfig,
          filePath: new URL(`./${route.component}`, astroConfig.projectRoot),
          logging,
          mode: "production",
          origin,
          pathname: route.pathname,
          route,
          routeCache,
          viteServer
        }).then((routes) => {
          const html = `${route.pathname}`.replace(/\/?$/, "/index.html");
          debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.yellow(html)}`);
          return routes;
        }).catch((err) => {
          debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2718"))} ${route.component}`);
          throw err;
        })
      };
      return;
    }
    const result = await getStaticPathsForRoute(opts, route).then((routes) => {
      const label = routes.paths.length === 1 ? "page" : "pages";
      debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.green("\u2714"))} ${route.component} \u2192 ${colors.magenta(`[${routes.paths.length} ${label}]`)}`);
      return routes;
    }).catch((err) => {
      debug(logging, "build", `\u251C\u2500\u2500 ${colors.bold(colors.red("\u2717"))} ${route.component}`);
      throw err;
    });
    if ((_a = result.rss) == null ? void 0 : _a.length) {
      for (let i = 0; i < result.rss.length; i++) {
        const rss = result.rss[i];
        if (rss.xml) {
          const { url, content } = rss.xml;
          if (content) {
            const rssFile = new URL(url.replace(/^\/?/, "./"), astroConfig.dist);
            if (assets[fileURLToPath(rssFile)]) {
              throw new Error(`[getStaticPaths] RSS feed ${url} already exists.
Use \`rss(data, {url: '...'})\` to choose a unique, custom URL. (${route.component})`);
            }
            assets[fileURLToPath(rssFile)] = content;
          }
        }
        if ((_b = rss.xsl) == null ? void 0 : _b.content) {
          const { url, content } = rss.xsl;
          const stylesheetFile = new URL(url.replace(/^\/?/, "./"), astroConfig.dist);
          if (assets[fileURLToPath(stylesheetFile)]) {
            throw new Error(`[getStaticPaths] RSS feed stylesheet ${url} already exists.
Use \`rss(data, {stylesheet: '...'})\` to choose a unique, custom URL. (${route.component})`);
          }
          assets[fileURLToPath(stylesheetFile)] = content;
        }
      }
    }
    allPages[route.component] = {
      route,
      paths: result.paths,
      preload: await ssrPreload({
        astroConfig,
        filePath: new URL(`./${route.component}`, astroConfig.projectRoot),
        logging,
        mode: "production",
        origin,
        pathname: result.paths[0],
        route,
        routeCache,
        viteServer
      })
    };
  }));
  return { assets, allPages };
}
async function getStaticPathsForRoute(opts, route) {
  const { astroConfig, logging, routeCache, viteServer } = opts;
  if (!viteServer)
    throw new Error(`vite.createServer() not called!`);
  const filePath = new URL(`./${route.component}`, astroConfig.projectRoot);
  const mod = await viteServer.ssrLoadModule(fileURLToPath(filePath));
  validateGetStaticPathsModule(mod);
  const rss = generateRssFunction(astroConfig.buildOptions.site, route);
  await assignStaticPaths(routeCache, route, mod, rss.generator);
  const staticPaths = routeCache[route.component];
  validateGetStaticPathsResult(staticPaths, logging);
  return {
    paths: staticPaths.map((staticPath) => staticPath.params && route.generate(staticPath.params)).filter(Boolean),
    rss: rss.rss
  };
}
export {
  collectPagesData
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvYnVpbGQvcGFnZS1kYXRhLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFpQkEsZ0NBQXVDLE1BQWdFO0FBQ3RHLFFBQU0sRUFBRSxhQUFhLFNBQVMsVUFBVSxRQUFRLFlBQVksZUFBZTtBQUUzRSxRQUFNLFNBQWlDO0FBQ3ZDLFFBQU0sV0FBeUI7QUFNL0IsUUFBTSxRQUFRLElBQ2IsU0FBUyxPQUFPLElBQUksT0FBTyxVQUFVO0FBeEN2QztBQTBDRyxRQUFJLE1BQU0sVUFBVTtBQUNuQixlQUFTLE1BQU0sYUFBYTtBQUFBLFFBQzNCO0FBQUEsUUFDQSxPQUFPLENBQUMsTUFBTTtBQUFBLFFBQ2QsU0FBUyxNQUFNLFdBQVc7QUFBQSxVQUN6QjtBQUFBLFVBQ0EsVUFBVSxJQUFJLElBQUksS0FBSyxNQUFNLGFBQWEsWUFBWTtBQUFBLFVBQ3REO0FBQUEsVUFDQSxNQUFNO0FBQUEsVUFDTjtBQUFBLFVBQ0EsVUFBVSxNQUFNO0FBQUEsVUFDaEI7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFdBRUMsS0FBSyxDQUFDLFdBQVc7QUFDakIsZ0JBQU0sT0FBTyxHQUFHLE1BQU0sV0FBVyxRQUFRLFFBQVE7QUFDakQsZ0JBQU0sU0FBUyxTQUFTLHNCQUFPLE9BQU8sS0FBSyxPQUFPLE1BQU0sY0FBUyxNQUFNLG9CQUFlLE9BQU8sT0FBTztBQUNwRyxpQkFBTztBQUFBLFdBRVAsTUFBTSxDQUFDLFFBQVE7QUFDZixnQkFBTSxTQUFTLFNBQVMsc0JBQU8sT0FBTyxLQUFLLE9BQU8sSUFBSSxjQUFTLE1BQU07QUFDckUsZ0JBQU07QUFBQTtBQUFBO0FBR1Q7QUFBQTtBQUdELFVBQU0sU0FBUyxNQUFNLHVCQUF1QixNQUFNLE9BQ2hELEtBQUssQ0FBQyxXQUFXO0FBQ2pCLFlBQU0sUUFBUSxPQUFPLE1BQU0sV0FBVyxJQUFJLFNBQVM7QUFDbkQsWUFBTSxTQUFTLFNBQVMsc0JBQU8sT0FBTyxLQUFLLE9BQU8sTUFBTSxjQUFTLE1BQU0sb0JBQWUsT0FBTyxRQUFRLElBQUksT0FBTyxNQUFNLFVBQVU7QUFDaEksYUFBTztBQUFBLE9BRVAsTUFBTSxDQUFDLFFBQVE7QUFDZixZQUFNLFNBQVMsU0FBUyxzQkFBTyxPQUFPLEtBQUssT0FBTyxJQUFJLGNBQVMsTUFBTTtBQUNyRSxZQUFNO0FBQUE7QUFFUixRQUFJLGFBQU8sUUFBUCxtQkFBWSxRQUFRO0FBQ3ZCLGVBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSztBQUMzQyxjQUFNLE1BQU0sT0FBTyxJQUFJO0FBQ3ZCLFlBQUksSUFBSSxLQUFLO0FBQ1osZ0JBQU0sRUFBRSxLQUFLLFlBQVksSUFBSTtBQUM3QixjQUFJLFNBQVM7QUFDWixrQkFBTSxVQUFVLElBQUksSUFBSSxJQUFJLFFBQVEsUUFBUSxPQUFPLFlBQVk7QUFDL0QsZ0JBQUksT0FBTyxjQUFjLFdBQVc7QUFDbkMsb0JBQU0sSUFBSSxNQUFNLDZCQUE2QjtBQUFBLG1FQUF5RixNQUFNO0FBQUE7QUFFN0ksbUJBQU8sY0FBYyxZQUFZO0FBQUE7QUFBQTtBQUduQyxZQUFJLFVBQUksUUFBSixtQkFBUyxTQUFTO0FBQ3JCLGdCQUFNLEVBQUUsS0FBSyxZQUFZLElBQUk7QUFDN0IsZ0JBQU0saUJBQWlCLElBQUksSUFBSSxJQUFJLFFBQVEsUUFBUSxPQUFPLFlBQVk7QUFDdEUsY0FBSSxPQUFPLGNBQWMsa0JBQWtCO0FBQzFDLGtCQUFNLElBQUksTUFDVCx3Q0FBd0M7QUFBQSwwRUFBZ0csTUFBTTtBQUFBO0FBR2hKLGlCQUFPLGNBQWMsbUJBQW1CO0FBQUE7QUFBQTtBQUFBO0FBSTNDLGFBQVMsTUFBTSxhQUFhO0FBQUEsTUFDM0I7QUFBQSxNQUNBLE9BQU8sT0FBTztBQUFBLE1BQ2QsU0FBUyxNQUFNLFdBQVc7QUFBQSxRQUN6QjtBQUFBLFFBQ0EsVUFBVSxJQUFJLElBQUksS0FBSyxNQUFNLGFBQWEsWUFBWTtBQUFBLFFBQ3REO0FBQUEsUUFDQSxNQUFNO0FBQUEsUUFDTjtBQUFBLFFBQ0EsVUFBVSxPQUFPLE1BQU07QUFBQSxRQUN2QjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUE7QUFBQTtBQUFBO0FBTUosU0FBTyxFQUFFLFFBQVE7QUFBQTtBQUdsQixzQ0FBc0MsTUFBK0IsT0FBbUU7QUFDdkksUUFBTSxFQUFFLGFBQWEsU0FBUyxZQUFZLGVBQWU7QUFDekQsTUFBSSxDQUFDO0FBQVksVUFBTSxJQUFJLE1BQU07QUFDakMsUUFBTSxXQUFXLElBQUksSUFBSSxLQUFLLE1BQU0sYUFBYSxZQUFZO0FBQzdELFFBQU0sTUFBTyxNQUFNLFdBQVcsY0FBYyxjQUFjO0FBQzFELCtCQUE2QjtBQUM3QixRQUFNLE1BQU0sb0JBQW9CLFlBQVksYUFBYSxNQUFNO0FBQy9ELFFBQU0sa0JBQWtCLFlBQVksT0FBTyxLQUFLLElBQUk7QUFDcEQsUUFBTSxjQUFjLFdBQVcsTUFBTTtBQUNyQywrQkFBNkIsYUFBYTtBQUMxQyxTQUFPO0FBQUEsSUFDTixPQUFPLFlBQVksSUFBSSxDQUFDLGVBQWUsV0FBVyxVQUFVLE1BQU0sU0FBUyxXQUFXLFNBQVMsT0FBTztBQUFBLElBQ3RHLEtBQUssSUFBSTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
