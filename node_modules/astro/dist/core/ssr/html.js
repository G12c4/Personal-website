import htmlparser2 from "htmlparser2";
function injectTags(html, tags) {
  let output = html;
  if (!tags.length)
    return output;
  const pos = { "head-prepend": -1, head: -1, "body-prepend": -1, body: -1 };
  const parser = new htmlparser2.Parser({
    onopentag(tagname) {
      if (tagname === "head")
        pos["head-prepend"] = parser.endIndex + 1;
      if (tagname === "body")
        pos["body-prepend"] = parser.endIndex + 1;
    },
    onclosetag(tagname) {
      if (tagname === "head")
        pos["head"] = parser.startIndex;
      if (tagname === "body")
        pos["body"] = parser.startIndex;
    }
  });
  parser.write(html);
  parser.end();
  const lastToFirst = Object.entries(pos).sort((a, b) => b[1] - a[1]);
  lastToFirst.forEach(([name, i]) => {
    if (i === -1) {
      if (name === "head-prepend" || name === "head")
        i = 0;
      if (name === "body-prepend" || name === "body")
        i = html.length;
    }
    let selected = tags.filter(({ injectTo }) => {
      if (name === "head-prepend" && !injectTo) {
        return true;
      } else {
        return injectTo === name;
      }
    });
    if (!selected.length)
      return;
    output = output.substring(0, i) + serializeTags(selected) + html.substring(i);
  });
  return output;
}
function collectResources(html) {
  let resources = [];
  const parser = new htmlparser2.Parser({
    onopentag(tagname, attrs) {
      if (tagname === "link")
        resources.push(attrs);
    }
  });
  parser.write(html);
  parser.end();
  return resources;
}
const unaryTags = new Set(["link", "meta", "base"]);
function serializeTag({ tag, attrs, children }, indent = "") {
  if (unaryTags.has(tag)) {
    return `<${tag}${serializeAttrs(attrs)}>`;
  } else {
    return `<${tag}${serializeAttrs(attrs)}>${serializeTags(children, incrementIndent(indent))}</${tag}>`;
  }
}
function serializeTags(tags, indent = "") {
  if (typeof tags === "string") {
    return tags;
  } else if (tags && tags.length) {
    return tags.map((tag) => `${indent}${serializeTag(tag, indent)}
`).join("");
  }
  return "";
}
function serializeAttrs(attrs) {
  let res = "";
  for (const key in attrs) {
    if (typeof attrs[key] === "boolean") {
      res += attrs[key] ? ` ${key}` : ``;
    } else {
      res += ` ${key}=${JSON.stringify(attrs[key])}`;
    }
  }
  return res;
}
function incrementIndent(indent = "") {
  return `${indent}${indent[0] === "	" ? "	" : "  "}`;
}
export {
  collectResources,
  injectTags
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvc3NyL2h0bWwudHMiXSwKICAibWFwcGluZ3MiOiAiQUFFQTtBQUdPLG9CQUFvQixNQUFjLE1BQXdDO0FBQ2hGLE1BQUksU0FBUztBQUNiLE1BQUksQ0FBQyxLQUFLO0FBQVEsV0FBTztBQUV6QixRQUFNLE1BQU0sRUFBRSxnQkFBZ0IsSUFBSSxNQUFNLElBQUksZ0JBQWdCLElBQUksTUFBTTtBQUd0RSxRQUFNLFNBQVMsSUFBSSxZQUFZLE9BQU87QUFBQSxJQUNyQyxVQUFVLFNBQVM7QUFDbEIsVUFBSSxZQUFZO0FBQVEsWUFBSSxrQkFBa0IsT0FBTyxXQUFXO0FBQ2hFLFVBQUksWUFBWTtBQUFRLFlBQUksa0JBQWtCLE9BQU8sV0FBVztBQUFBO0FBQUEsSUFFakUsV0FBVyxTQUFTO0FBQ25CLFVBQUksWUFBWTtBQUFRLFlBQUksVUFBVSxPQUFPO0FBQzdDLFVBQUksWUFBWTtBQUFRLFlBQUksVUFBVSxPQUFPO0FBQUE7QUFBQTtBQUcvQyxTQUFPLE1BQU07QUFDYixTQUFPO0FBR1AsUUFBTSxjQUFjLE9BQU8sUUFBUSxLQUFLLEtBQUssQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDaEUsY0FBWSxRQUFRLENBQUMsQ0FBQyxNQUFNLE9BQU87QUFDbEMsUUFBSSxNQUFNLElBQUk7QUFFYixVQUFJLFNBQVMsa0JBQWtCLFNBQVM7QUFBUSxZQUFJO0FBQ3BELFVBQUksU0FBUyxrQkFBa0IsU0FBUztBQUFRLFlBQUksS0FBSztBQUFBO0FBRTFELFFBQUksV0FBVyxLQUFLLE9BQU8sQ0FBQyxFQUFFLGVBQWU7QUFDNUMsVUFBSSxTQUFTLGtCQUFrQixDQUFDLFVBQVU7QUFDekMsZUFBTztBQUFBLGFBQ0Q7QUFDTixlQUFPLGFBQWE7QUFBQTtBQUFBO0FBR3RCLFFBQUksQ0FBQyxTQUFTO0FBQVE7QUFDdEIsYUFBUyxPQUFPLFVBQVUsR0FBRyxLQUFLLGNBQWMsWUFBWSxLQUFLLFVBQVU7QUFBQTtBQUc1RSxTQUFPO0FBQUE7QUFNRCwwQkFBMEIsTUFBMEI7QUFDMUQsTUFBSSxZQUF3QjtBQUM1QixRQUFNLFNBQVMsSUFBSSxZQUFZLE9BQU87QUFBQSxJQUVyQyxVQUFVLFNBQVMsT0FBTztBQUN6QixVQUFJLFlBQVk7QUFBUSxrQkFBVSxLQUFLO0FBQUE7QUFBQTtBQUd6QyxTQUFPLE1BQU07QUFDYixTQUFPO0FBQ1AsU0FBTztBQUFBO0FBa0NSLE1BQU0sWUFBWSxJQUFJLElBQUksQ0FBQyxRQUFRLFFBQVE7QUFFM0Msc0JBQXNCLEVBQUUsS0FBSyxPQUFPLFlBQW9DLFNBQVMsSUFBWTtBQUM1RixNQUFJLFVBQVUsSUFBSSxNQUFNO0FBQ3ZCLFdBQU8sSUFBSSxNQUFNLGVBQWU7QUFBQSxTQUMxQjtBQUNOLFdBQU8sSUFBSSxNQUFNLGVBQWUsVUFBVSxjQUFjLFVBQVUsZ0JBQWdCLGFBQWE7QUFBQTtBQUFBO0FBSWpHLHVCQUF1QixNQUEwQyxTQUFTLElBQVk7QUFDckYsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUM3QixXQUFPO0FBQUEsYUFDRyxRQUFRLEtBQUssUUFBUTtBQUMvQixXQUFPLEtBQUssSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLGFBQWEsS0FBSztBQUFBLEdBQWEsS0FBSztBQUFBO0FBRTFFLFNBQU87QUFBQTtBQUdSLHdCQUF3QixPQUFnRDtBQUN2RSxNQUFJLE1BQU07QUFDVixhQUFXLE9BQU8sT0FBTztBQUN4QixRQUFJLE9BQU8sTUFBTSxTQUFTLFdBQVc7QUFDcEMsYUFBTyxNQUFNLE9BQU8sSUFBSSxRQUFRO0FBQUEsV0FDMUI7QUFDTixhQUFPLElBQUksT0FBTyxLQUFLLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFHekMsU0FBTztBQUFBO0FBR1IseUJBQXlCLFNBQVMsSUFBSTtBQUNyQyxTQUFPLEdBQUcsU0FBUyxPQUFPLE9BQU8sTUFBTyxNQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
