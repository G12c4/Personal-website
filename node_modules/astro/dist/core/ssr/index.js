var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import eol from "eol";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { renderPage } from "../../runtime/server/index.js";
import { codeFrame, resolveDependency } from "../util.js";
import { getStylesForURL } from "./css.js";
import { injectTags } from "./html.js";
import { getParams, validateGetStaticPathsModule, validateGetStaticPathsResult } from "./routing.js";
import { createResult } from "./result.js";
import { assignStaticPaths, ensureRouteCached, findPathItemByKey } from "./route-cache.js";
const svelteStylesRE = /svelte\?svelte&type=style/;
const cache = new Map();
async function resolveRenderer(viteServer, renderer, astroConfig) {
  const resolvedRenderer = {};
  const {
    default: { name, client, polyfills, hydrationPolyfills, server }
  } = await import(resolveDependency(renderer, astroConfig));
  resolvedRenderer.name = name;
  if (client)
    resolvedRenderer.source = path.posix.join(renderer, client);
  resolvedRenderer.serverEntry = path.posix.join(renderer, server);
  if (Array.isArray(hydrationPolyfills))
    resolvedRenderer.hydrationPolyfills = hydrationPolyfills.map((src) => path.posix.join(renderer, src));
  if (Array.isArray(polyfills))
    resolvedRenderer.polyfills = polyfills.map((src) => path.posix.join(renderer, src));
  const { url } = await viteServer.moduleGraph.ensureEntryFromUrl(resolvedRenderer.serverEntry);
  const { default: rendererSSR } = await viteServer.ssrLoadModule(url);
  resolvedRenderer.ssr = rendererSSR;
  const completedRenderer = resolvedRenderer;
  return completedRenderer;
}
async function resolveRenderers(viteServer, astroConfig) {
  const ids = astroConfig.renderers;
  const renderers = await Promise.all(ids.map((renderer) => {
    if (cache.has(renderer))
      return cache.get(renderer);
    let promise = resolveRenderer(viteServer, renderer, astroConfig);
    cache.set(renderer, promise);
    return promise;
  }));
  return renderers;
}
async function errorHandler(e, { viteServer, filePath }) {
  if (e.stack) {
    e.stack = eol.lf(e.stack);
  }
  if (e instanceof Error) {
    viteServer.ssrFixStacktrace(e);
  }
  if (Array.isArray(e.errors)) {
    const { location, pluginName, text } = e.errors[0];
    const err = e;
    if (location)
      err.loc = { file: location.file, line: location.line, column: location.column };
    let src = err.pluginCode;
    if (!src && err.id && fs.existsSync(err.id))
      src = await fs.promises.readFile(err.id, "utf8");
    if (!src)
      src = await fs.promises.readFile(filePath, "utf8");
    err.frame = codeFrame(src, err.loc);
    err.id = location == null ? void 0 : location.file;
    err.message = `${location == null ? void 0 : location.file}: ${text}
${err.frame}
`;
    if (pluginName)
      err.plugin = pluginName;
    throw err;
  }
  throw e;
}
async function preload({ astroConfig, filePath, viteServer }) {
  const renderers = await resolveRenderers(viteServer, astroConfig);
  const mod = await viteServer.ssrLoadModule(fileURLToPath(filePath));
  return [renderers, mod];
}
async function getParamsAndProps({
  route,
  routeCache,
  logging,
  pathname,
  mod,
  validate = true
}) {
  let params = {};
  let pageProps;
  if (route && !route.pathname) {
    if (route.params.length) {
      const paramsMatch = route.pattern.exec(pathname);
      if (paramsMatch) {
        params = getParams(route.params)(paramsMatch);
      }
    }
    if (validate) {
      validateGetStaticPathsModule(mod);
    }
    if (!routeCache[route.component]) {
      await assignStaticPaths(routeCache, route, mod);
    }
    if (validate) {
      validateGetStaticPathsResult(routeCache[route.component], logging);
    }
    const staticPaths = routeCache[route.component];
    const paramsKey = JSON.stringify(params);
    const matchedStaticPath = findPathItemByKey(staticPaths, paramsKey, logging);
    if (!matchedStaticPath) {
      throw new Error(`[getStaticPaths] route pattern matched, but no matching static path found. (${pathname})`);
    }
    pageProps = Object.create(matchedStaticPath.props || Object.prototype);
  } else {
    pageProps = {};
  }
  return [params, pageProps];
}
async function render(renderers, mod, ssrOpts) {
  const { astroConfig, filePath, logging, mode, origin, pathname, route, routeCache, viteServer } = ssrOpts;
  let params = {};
  let pageProps = {};
  if (route && !route.pathname) {
    if (route.params.length) {
      const paramsMatch = route.pattern.exec(pathname);
      if (paramsMatch) {
        params = getParams(route.params)(paramsMatch);
      }
    }
    validateGetStaticPathsModule(mod);
    await ensureRouteCached(routeCache, route, mod);
    validateGetStaticPathsResult(routeCache[route.component], logging);
    const routePathParams = routeCache[route.component];
    const matchedStaticPath = routePathParams.find(({ params: _params }) => JSON.stringify(_params) === JSON.stringify(params));
    if (!matchedStaticPath) {
      throw new Error(`[getStaticPaths] route pattern matched, but no matching static path found. (${pathname})`);
    }
    pageProps = __spreadValues({}, matchedStaticPath.props) || {};
  }
  const Component = await mod.default;
  if (!Component)
    throw new Error(`Expected an exported Astro component but received typeof ${typeof Component}`);
  if (!Component.isAstroComponentFactory)
    throw new Error(`Unable to SSR non-Astro component (${route == null ? void 0 : route.component})`);
  const scripts = astroConfig.buildOptions.experimentalStaticBuild ? new Set(Array.from(mod.$$metadata.hoistedScriptPaths()).map((src) => ({
    props: { type: "module", src },
    children: ""
  }))) : new Set();
  if (mode === "development" && astroConfig.buildOptions.experimentalStaticBuild) {
    scripts.add({
      props: { type: "module", src: "/@vite/client" },
      children: ""
    });
    scripts.add({
      props: { type: "module", src: new URL("../../runtime/client/hmr.js", import.meta.url).pathname },
      children: ""
    });
  }
  const result = createResult({ astroConfig, logging, origin, params, pathname, renderers, scripts });
  result.resolve = async (s) => {
    if (astroConfig.buildOptions.experimentalStaticBuild) {
      const [, resolvedPath] = await viteServer.moduleGraph.resolveUrl(s);
      return resolvedPath;
    } else {
      return s;
    }
  };
  let html = await renderPage(result, Component, pageProps, null);
  const tags = [];
  if (mode === "development" && !astroConfig.buildOptions.experimentalStaticBuild) {
    tags.push({
      tag: "script",
      attrs: { type: "module" },
      children: await getHmrScript(),
      injectTo: "head"
    });
  }
  [...getStylesForURL(filePath, viteServer)].forEach((href) => {
    if (mode === "development" && svelteStylesRE.test(href)) {
      tags.push({
        tag: "script",
        attrs: { type: "module", src: href },
        injectTo: "head"
      });
    } else {
      tags.push({
        tag: "link",
        attrs: {
          rel: "stylesheet",
          href,
          "data-astro-injected": true
        },
        injectTo: "head"
      });
    }
  });
  html = injectTags(html, tags);
  if (mode === "development" && !astroConfig.buildOptions.experimentalStaticBuild) {
    const relativeURL = filePath.href.replace(astroConfig.projectRoot.href, "/");
    html = await viteServer.transformIndexHtml(relativeURL, html, pathname);
  }
  if (!/<!doctype html/i.test(html)) {
    html = "<!DOCTYPE html>\n" + html;
  }
  return html;
}
let hmrScript;
async function getHmrScript() {
  if (hmrScript)
    return hmrScript;
  const filePath = fileURLToPath(new URL("../../runtime/client/hmr.js", import.meta.url));
  const content = await fs.promises.readFile(filePath);
  hmrScript = content.toString();
  return hmrScript;
}
async function ssr(ssrOpts) {
  try {
    const [renderers, mod] = await preload(ssrOpts);
    return await render(renderers, mod, ssrOpts);
  } catch (e) {
    await errorHandler(e, { viteServer: ssrOpts.viteServer, filePath: ssrOpts.filePath });
    throw e;
  }
}
export {
  getParamsAndProps,
  preload,
  render,
  ssr
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvc3NyL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUEsTUFBTSxpQkFBaUI7QUF1QnZCLE1BQU0sUUFBUSxJQUFJO0FBR2xCLCtCQUErQixZQUFnQyxVQUFrQixhQUEwQjtBQUMxRyxRQUFNLG1CQUF3QjtBQUk5QixRQUFNO0FBQUEsSUFDTCxTQUFTLEVBQUUsTUFBTSxRQUFRLFdBQVcsb0JBQW9CO0FBQUEsTUFDckQsTUFBTSxPQUFPLGtCQUFrQixVQUFVO0FBRTdDLG1CQUFpQixPQUFPO0FBQ3hCLE1BQUk7QUFBUSxxQkFBaUIsU0FBUyxLQUFLLE1BQU0sS0FBSyxVQUFVO0FBQ2hFLG1CQUFpQixjQUFjLEtBQUssTUFBTSxLQUFLLFVBQVU7QUFDekQsTUFBSSxNQUFNLFFBQVE7QUFBcUIscUJBQWlCLHFCQUFxQixtQkFBbUIsSUFBSSxDQUFDLFFBQWdCLEtBQUssTUFBTSxLQUFLLFVBQVU7QUFDL0ksTUFBSSxNQUFNLFFBQVE7QUFBWSxxQkFBaUIsWUFBWSxVQUFVLElBQUksQ0FBQyxRQUFnQixLQUFLLE1BQU0sS0FBSyxVQUFVO0FBQ3BILFFBQU0sRUFBRSxRQUFRLE1BQU0sV0FBVyxZQUFZLG1CQUFtQixpQkFBaUI7QUFDakYsUUFBTSxFQUFFLFNBQVMsZ0JBQWdCLE1BQU0sV0FBVyxjQUFjO0FBQ2hFLG1CQUFpQixNQUFNO0FBRXZCLFFBQU0sb0JBQThCO0FBQ3BDLFNBQU87QUFBQTtBQUdSLGdDQUFnQyxZQUFnQyxhQUErQztBQUM5RyxRQUFNLE1BQWdCLFlBQVk7QUFDbEMsUUFBTSxZQUFZLE1BQU0sUUFBUSxJQUMvQixJQUFJLElBQUksQ0FBQyxhQUFhO0FBQ3JCLFFBQUksTUFBTSxJQUFJO0FBQVcsYUFBTyxNQUFNLElBQUk7QUFDMUMsUUFBSSxVQUFVLGdCQUFn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
