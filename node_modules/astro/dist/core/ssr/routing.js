import fs from "fs";
import path from "path";
import { compile } from "path-to-regexp";
import slash from "slash";
import { fileURLToPath } from "url";
import { warn } from "../logger.js";
function getParams(array) {
  const fn = (match) => {
    const params = {};
    array.forEach((key, i) => {
      if (key.startsWith("...")) {
        params[key.slice(3)] = match[i + 1] ? decodeURIComponent(match[i + 1]) : void 0;
      } else {
        params[key] = decodeURIComponent(match[i + 1]);
      }
    });
    return params;
  };
  return fn;
}
function matchRoute(pathname, manifest) {
  return manifest.routes.find((route) => route.pattern.test(pathname));
}
function validateGetStaticPathsModule(mod) {
  if (mod.createCollection) {
    throw new Error(`[createCollection] deprecated. Please use getStaticPaths() instead.`);
  }
  if (!mod.getStaticPaths) {
    throw new Error(`[getStaticPaths] getStaticPaths() function is required. Make sure that you \`export\` the function from your component.`);
  }
}
function validateGetStaticPathsResult(result, logging) {
  if (!Array.isArray(result)) {
    throw new Error(`[getStaticPaths] invalid return value. Expected an array of path objects, but got \`${JSON.stringify(result)}\`.`);
  }
  result.forEach((pathObject) => {
    if (!pathObject.params) {
      warn(logging, "getStaticPaths", `invalid path object. Expected an object with key \`params\`, but got \`${JSON.stringify(pathObject)}\`. Skipped.`);
      return;
    }
    for (const [key, val] of Object.entries(pathObject.params)) {
      if (!(typeof val === "undefined" || typeof val === "string")) {
        warn(logging, "getStaticPaths", `invalid path param: ${key}. A string value was expected, but got \`${JSON.stringify(val)}\`.`);
      }
      if (val === "") {
        warn(logging, "getStaticPaths", `invalid path param: ${key}. \`undefined\` expected for an optional param, but got empty string.`);
      }
    }
  });
}
function createRouteManifest({ config, cwd }, logging) {
  const components = [];
  const routes = [];
  const validExtensions = new Set([".astro", ".md"]);
  function walk(dir, parentSegments, parentParams) {
    let items = [];
    fs.readdirSync(dir).forEach((basename) => {
      const resolved = path.join(dir, basename);
      const file = slash(path.relative(cwd || fileURLToPath(config.projectRoot), resolved));
      const isDir = fs.statSync(resolved).isDirectory();
      const ext = path.extname(basename);
      const name = ext ? basename.slice(0, -ext.length) : basename;
      if (name[0] === "_") {
        return;
      }
      if (basename[0] === "." && basename !== ".well-known") {
        return;
      }
      if (!isDir && !validExtensions.has(ext)) {
        return;
      }
      const segment = isDir ? basename : name;
      if (/^\$/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 Astro's Collections API has been replaced by dynamic route params.`);
      }
      if (/\]\[/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 parameters must be separated`);
      }
      if (countOccurrences("[", segment) !== countOccurrences("]", segment)) {
        throw new Error(`Invalid route ${file} \u2014 brackets are unbalanced`);
      }
      if (/.+\[\.\.\.[^\]]+\]/.test(segment) || /\[\.\.\.[^\]]+\].+/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 rest parameter must be a standalone segment`);
      }
      const parts = getParts(segment, file);
      const isIndex = isDir ? false : basename.startsWith("index.");
      const routeSuffix = basename.slice(basename.indexOf("."), -ext.length);
      items.push({
        basename,
        ext,
        parts,
        file: slash(file),
        isDir,
        isIndex,
        isPage: true,
        routeSuffix
      });
    });
    items = items.sort(comparator);
    items.forEach((item) => {
      const segments = parentSegments.slice();
      if (item.isIndex) {
        if (item.routeSuffix) {
          if (segments.length > 0) {
            const lastSegment = segments[segments.length - 1].slice();
            const lastPart = lastSegment[lastSegment.length - 1];
            if (lastPart.dynamic) {
              lastSegment.push({
                dynamic: false,
                spread: false,
                content: item.routeSuffix
              });
            } else {
              lastSegment[lastSegment.length - 1] = {
                dynamic: false,
                spread: false,
                content: `${lastPart.content}${item.routeSuffix}`
              };
            }
            segments[segments.length - 1] = lastSegment;
          } else {
            segments.push(item.parts);
          }
        }
      } else {
        segments.push(item.parts);
      }
      const params = parentParams.slice();
      params.push(...item.parts.filter((p) => p.dynamic).map((p) => p.content));
      if (item.isDir) {
        walk(path.join(dir, item.basename), segments, params);
      } else {
        components.push(item.file);
        const component = item.file;
        const pattern = getPattern(segments, config.devOptions.trailingSlash);
        const generate = getGenerator(segments, config.devOptions.trailingSlash);
        const pathname = segments.every((segment) => segment.length === 1 && !segment[0].dynamic) ? `/${segments.map((segment) => segment[0].content).join("/")}` : null;
        routes.push({
          type: "page",
          pattern,
          params,
          component,
          generate,
          pathname: pathname || void 0
        });
      }
    });
  }
  if (fs.existsSync(config.pages)) {
    walk(fileURLToPath(config.pages), [], []);
  } else {
    const pagesDirRootRelative = config.pages.href.slice(config.projectRoot.href.length);
    warn(logging, "astro", `Missing pages directory: ${pagesDirRootRelative}`);
  }
  return {
    routes
  };
}
function countOccurrences(needle, haystack) {
  let count = 0;
  for (let i = 0; i < haystack.length; i += 1) {
    if (haystack[i] === needle)
      count += 1;
  }
  return count;
}
function isSpread(str) {
  const spreadPattern = /\[\.{3}/g;
  return spreadPattern.test(str);
}
function comparator(a, b) {
  if (a.isIndex !== b.isIndex) {
    if (a.isIndex)
      return isSpread(a.file) ? 1 : -1;
    return isSpread(b.file) ? -1 : 1;
  }
  const max = Math.max(a.parts.length, b.parts.length);
  for (let i = 0; i < max; i += 1) {
    const aSubPart = a.parts[i];
    const bSubPart = b.parts[i];
    if (!aSubPart)
      return 1;
    if (!bSubPart)
      return -1;
    if (aSubPart.spread && bSubPart.spread) {
      return a.isIndex ? 1 : -1;
    }
    if (aSubPart.spread !== bSubPart.spread)
      return aSubPart.spread ? 1 : -1;
    if (aSubPart.dynamic !== bSubPart.dynamic) {
      return aSubPart.dynamic ? 1 : -1;
    }
    if (!aSubPart.dynamic && aSubPart.content !== bSubPart.content) {
      return bSubPart.content.length - aSubPart.content.length || (aSubPart.content < bSubPart.content ? -1 : 1);
    }
  }
  if (a.isPage !== b.isPage) {
    return a.isPage ? 1 : -1;
  }
  return a.file < b.file ? -1 : 1;
}
function getParts(part, file) {
  const result = [];
  part.split(/\[(.+?\(.+?\)|.+?)\]/).map((str, i) => {
    if (!str)
      return;
    const dynamic = i % 2 === 1;
    const [, content] = dynamic ? /([^(]+)$/.exec(str) || [null, null] : [null, str];
    if (!content || dynamic && !/^(\.\.\.)?[a-zA-Z0-9_$]+$/.test(content)) {
      throw new Error(`Invalid route ${file} \u2014 parameter name must match /^[a-zA-Z0-9_$]+$/`);
    }
    result.push({
      content,
      dynamic,
      spread: dynamic && /^\.{3}.+$/.test(content)
    });
  });
  return result;
}
function getTrailingSlashPattern(addTrailingSlash) {
  if (addTrailingSlash === "always") {
    return "\\/$";
  }
  if (addTrailingSlash === "never") {
    return "$";
  }
  return "\\/?$";
}
function getPattern(segments, addTrailingSlash) {
  const pathname = segments.map((segment) => {
    return segment[0].spread ? "(?:\\/(.*?))?" : "\\/" + segment.map((part) => {
      if (part)
        return part.dynamic ? "([^/]+?)" : part.content.normalize().replace(/\?/g, "%3F").replace(/#/g, "%23").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join("");
  }).join("");
  const trailing = addTrailingSlash && segments.length ? getTrailingSlashPattern(addTrailingSlash) : "$";
  return new RegExp(`^${pathname || "\\/"}${trailing}`);
}
function getGenerator(segments, addTrailingSlash) {
  const template = segments.map((segment) => {
    return segment[0].spread ? `/:${segment[0].content.substr(3)}(.*)?` : "/" + segment.map((part) => {
      if (part)
        return part.dynamic ? `:${part.content}` : part.content.normalize().replace(/\?/g, "%3F").replace(/#/g, "%23").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join("");
  }).join("");
  const trailing = addTrailingSlash !== "never" && segments.length ? "/" : "";
  const toPath = compile(template + trailing);
  return toPath;
}
export {
  createRouteManifest,
  getParams,
  matchRoute,
  validateGetStaticPathsModule,
  validateGetStaticPathsResult
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvc3NyL3JvdXRpbmcudHMiXSwKICAibWFwcGluZ3MiOiAiQUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPTyxtQkFBbUIsT0FBaUI7QUFDMUMsUUFBTSxLQUFLLENBQUMsVUFBMkI7QUFDdEMsVUFBTSxTQUFpQjtBQUN2QixVQUFNLFFBQVEsQ0FBQyxLQUFLLE1BQU07QUFDekIsVUFBSSxJQUFJLFdBQVcsUUFBUTtBQUMxQixlQUFPLElBQUksTUFBTSxNQUFNLE1BQU0sSUFBSSxLQUFLLG1CQUFtQixNQUFNLElBQUksTUFBTTtBQUFBLGFBQ25FO0FBQ04sZUFBTyxPQUFPLG1CQUFtQixNQUFNLElBQUk7QUFBQTtBQUFBO0FBRzdDLFdBQU87QUFBQTtBQUdSLFNBQU87QUFBQTtBQUlELG9CQUFvQixVQUFrQixVQUErQztBQUMzRixTQUFPLFNBQVMsT0FBTyxLQUFLLENBQUMsVUFBVSxNQUFNLFFBQVEsS0FBSztBQUFBO0FBSXBELHNDQUFzQyxLQUF3QjtBQUNwRSxNQUFLLElBQVksa0JBQWtCO0FBQ2xDLFVBQU0sSUFBSSxNQUFNO0FBQUE7QUFFakIsTUFBSSxDQUFDLElBQUksZ0JBQWdCO0FBQ3hCLFVBQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUtYLHNDQUFzQyxRQUE4QixTQUFxQjtBQUMvRixNQUFJLENBQUMsTUFBTSxRQUFRLFNBQVM7QUFDM0IsVUFBTSxJQUFJLE1BQU0sdUZBQXVGLEtBQUssVUFBVTtBQUFBO0FBRXZILFNBQU8sUUFBUSxDQUFDLGVBQWU7QUFDOUIsUUFBSSxDQUFDLFdBQVcsUUFBUTtBQUN2QixXQUFLLFNBQVMsa0JBQWtCLDBFQUEwRSxLQUFLLFVBQVU7QUFDekg7QUFBQTtBQUVELGVBQVcsQ0FBQyxLQUFLLFFBQVEsT0FBTyxRQUFRLFdBQVcsU0FBUztBQUMzRCxVQUFJLENBQUUsUUFBTyxRQUFRLGVBQWUsT0FBTyxRQUFRLFdBQVc7QUFDN0QsYUFBSyxTQUFTLGtCQUFr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
