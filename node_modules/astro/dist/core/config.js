import * as colors from "kleur/colors";
import path from "path";
import { pathToFileURL, fileURLToPath } from "url";
import { z } from "zod";
import load from "@proload/core";
import loadTypeScript from "@proload/plugin-tsm";
load.use([loadTypeScript]);
const AstroConfigSchema = z.object({
  projectRoot: z.string().optional().default(".").transform((val) => new URL(val)),
  src: z.string().optional().default("./src").transform((val) => new URL(val)),
  pages: z.string().optional().default("./src/pages").transform((val) => new URL(val)),
  layouts: z.string().optional().default("./src/layouts").transform((val) => new URL(val)),
  public: z.string().optional().default("./public").transform((val) => new URL(val)),
  dist: z.string().optional().default("./dist").transform((val) => new URL(val)),
  renderers: z.array(z.string()).optional().default(["@astrojs/renderer-svelte", "@astrojs/renderer-vue", "@astrojs/renderer-react", "@astrojs/renderer-preact"]),
  markdownOptions: z.object({
    footnotes: z.boolean().optional(),
    gfm: z.boolean().optional(),
    render: z.any().optional().default(["@astrojs/markdown-remark", {}])
  }).strict().optional().default({}),
  buildOptions: z.object({
    site: z.string().optional(),
    sitemap: z.boolean().optional().default(true),
    pageUrlFormat: z.union([z.literal("file"), z.literal("directory")]).optional().default("directory"),
    experimentalStaticBuild: z.boolean().optional().default(false),
    drafts: z.boolean().optional().default(false)
  }).optional().default({}),
  devOptions: z.object({
    hostname: z.string().optional().default("localhost"),
    port: z.number().optional().default(3e3),
    trailingSlash: z.union([z.literal("always"), z.literal("never"), z.literal("ignore")]).optional().default("ignore")
  }).optional().default({}),
  vite: z.any().optional().default({})
});
async function validateConfig(userConfig, root) {
  const fileProtocolRoot = pathToFileURL(root + path.sep);
  const AstroConfigRelativeSchema = AstroConfigSchema.extend({
    projectRoot: z.string().default(".").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    src: z.string().default("./src").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    pages: z.string().default("./src/pages").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    layouts: z.string().default("./src/layouts").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    public: z.string().default("./public").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    dist: z.string().default("./dist").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot))
  });
  return AstroConfigRelativeSchema.parseAsync(userConfig);
}
function addTrailingSlash(str) {
  return str.replace(/\/*$/, "/");
}
function resolveFlags(flags) {
  return {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0,
    hostname: typeof flags.hostname === "string" ? flags.hostname : void 0,
    experimentalStaticBuild: typeof flags.experimentalStaticBuild === "boolean" ? flags.experimentalStaticBuild : false,
    drafts: typeof flags.drafts === "boolean" ? flags.drafts : false
  };
}
function mergeCLIFlags(astroConfig, flags) {
  astroConfig.buildOptions = astroConfig.buildOptions || {};
  astroConfig.devOptions = astroConfig.devOptions || {};
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.site === "string")
    astroConfig.buildOptions.site = flags.site;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
  if (typeof flags.hostname === "string")
    astroConfig.devOptions.hostname = flags.hostname;
  if (typeof flags.experimentalStaticBuild === "boolean")
    astroConfig.buildOptions.experimentalStaticBuild = flags.experimentalStaticBuild;
  if (typeof flags.drafts === "boolean")
    astroConfig.buildOptions.drafts = flags.drafts;
  return astroConfig;
}
async function loadConfig(configOptions) {
  const root = configOptions.cwd ? path.resolve(configOptions.cwd) : process.cwd();
  const flags = resolveFlags(configOptions.flags || {});
  let userConfig = {};
  let userConfigPath;
  if (flags == null ? void 0 : flags.config) {
    userConfigPath = /^\.*\//.test(flags.config) ? flags.config : `./${flags.config}`;
    userConfigPath = fileURLToPath(new URL(userConfigPath, `file://${root}/`));
  }
  const config = await load("astro", { mustExist: false, cwd: root, filePath: userConfigPath });
  if (config) {
    userConfig = config.value;
  }
  const mergedConfig = mergeCLIFlags(userConfig, flags);
  const validatedConfig = await validateConfig(mergedConfig, root);
  return validatedConfig;
}
function formatConfigError(err) {
  const errorList = err.issues.map((issue) => `  ! ${colors.bold(issue.path.join("."))}  ${colors.red(issue.message + ".")}`);
  return `${colors.red("[config]")} Astro found issue(s) with your configuration:
${errorList.join("\n")}`;
}
export {
  AstroConfigSchema,
  formatConfigError,
  loadConfig,
  validateConfig
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvY29uZmlnLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsS0FBSyxJQUFJLENBQUM7QUFFSCxNQUFNLG9CQUFvQixFQUFFLE9BQU87QUFBQSxFQUN6QyxhQUFhLEVBQ1gsU0FDQSxXQUNBLFFBQVEsS0FDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM3QixLQUFLLEVBQ0gsU0FDQSxXQUNBLFFBQVEsU0FDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM3QixPQUFPLEVBQ0wsU0FDQSxXQUNBLFFBQVEsZUFDUixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUk7QUFBQSxFQUM3QixTQUFTLEVBQ1AsU0FDQSxXQUNBLFFBQVEsaUJBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDN0IsUUFBUSxFQUNOLFNBQ0EsV0FDQSxRQUFRLFlBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDN0IsTUFBTSxFQUNKLFNBQ0EsV0FDQSxRQUFRLFVBQ1IsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJO0FBQUEsRUFDN0IsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLFdBQVcsUUFBUSxDQUFDLDRCQUE0Qix5QkFBeUIsMkJBQTJCO0FBQUEsRUFDbkksaUJBQWlCLEVBQ2YsT0FBTztBQUFBLElBQ1AsV0FBVyxFQUFFLFVBQVU7QUFBQSxJQUN2QixLQUFLLEVBQUUsVUFBVTtBQUFBLElBQ2pCLFFBQVEsRUFBRSxNQUFNLFdBQVcsUUFBUSxDQUFDLDRCQUE0QjtBQUFBLEtBRWhFLFNBQ0EsV0FDQSxRQUFRO0FBQUEsRUFDVixjQUFjLEVBQ1osT0FBTztBQUFBLElBQ1AsTUFBTSxFQUFFLFNBQVM7QUFBQSxJQUNqQixTQUFTLEVBQUUsVUFBVSxXQUFXLFFBQVE7QUFBQSxJQUN4QyxlQUFlLEVBQ2IsTUFBTSxDQUFDLEVBQUUsUUFB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
