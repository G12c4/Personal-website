import { bold, blue, dim, red, grey, underline, yellow } from "kleur/colors";
import { performance } from "perf_hooks";
import { Writable } from "stream";
import stringWidth from "string-width";
import { format as utilFormat } from "util";
function getLoggerLocale() {
  const defaultLocale = "en-US";
  if (process.env.LANG) {
    const extractedLocale = process.env.LANG.split(".")[0].replace(/_/g, "-");
    if (extractedLocale.length < 2)
      return defaultLocale;
    else
      return extractedLocale;
  } else
    return defaultLocale;
}
const dt = new Intl.DateTimeFormat(getLoggerLocale(), {
  hour: "2-digit",
  minute: "2-digit"
});
const defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    dest.write(dim(dt.format(new Date()) + " "));
    let type = event.type;
    if (type) {
      if (event.level === "info") {
        type = bold(blue(type));
      } else if (event.level === "warn") {
        type = bold(yellow(type));
      } else if (event.level === "error") {
        type = bold(red(type));
      }
      dest.write(`[${type}] `);
    }
    dest.write(utilFormat(...event.args));
    dest.write("\n");
    callback();
  }
});
const defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
const levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function log(opts = {}, level, type, ...args) {
  var _a, _b;
  const logLevel = (_a = opts.level) != null ? _a : defaultLogOptions.level;
  const dest = (_b = opts.dest) != null ? _b : defaultLogOptions.dest;
  const event = {
    type,
    level,
    args,
    message: ""
  };
  if (levels[logLevel] > levels[level]) {
    return;
  }
  dest.write(event);
}
function debug(opts, type, ...messages) {
  return log(opts, "debug", type, ...messages);
}
function info(opts, type, ...messages) {
  return log(opts, "info", type, ...messages);
}
function warn(opts, type, ...messages) {
  return log(opts, "warn", type, ...messages);
}
function error(opts, type, ...messages) {
  return log(opts, "error", type, ...messages);
}
function table(opts, columns) {
  return function logTable(logFn, ...input) {
    const messages = columns.map((len, i) => padStr(input[i].toString(), len));
    logFn(opts, null, ...messages);
  };
}
function parseError(opts, err) {
  if (!err.frame) {
    return error(opts, "parse-error", err.message || err);
  }
  let frame = err.frame.replace(/^([0-9]+)(:)/gm, `${bold("$1")} \u2502`).replace(/(?<=^\s+)(\^)/gm, bold(red(" ^"))).replace(/^/gm, "   ");
  error(opts, "parse-error", `
 ${underline(bold(grey(`${err.filename || ""}:${err.start.line}:${err.start.column}`)))}
 ${bold(red(`\u{1D605} ${err.message}`))}
${frame}
`);
}
const logger = {
  debug: debug.bind(null, defaultLogOptions),
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
function padStr(str, len) {
  const strLen = stringWidth(str);
  if (strLen > len) {
    return str.substring(0, len - 3) + "...";
  }
  const spaces = Array.from({ length: len - strLen }, () => " ").join("");
  return str + spaces;
}
let defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}
function timerMessage(message, startTime = performance.now()) {
  let timeDiff = performance.now() - startTime;
  let timeDisplay = timeDiff < 750 ? `${Math.round(timeDiff)}ms` : `${(timeDiff / 1e3).toFixed(1)}s`;
  return `${message}   ${dim(timeDisplay)}`;
}
export {
  debug,
  defaultLogDestination,
  defaultLogLevel,
  defaultLogOptions,
  error,
  info,
  levels,
  log,
  logger,
  parseError,
  table,
  timerMessage,
  warn
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbG9nZ2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BLDJCQUFtQztBQUNsQyxRQUFNLGdCQUFnQjtBQUN0QixNQUFJLFFBQVEsSUFBSSxNQUFNO0FBQ3JCLFVBQU0sa0JBQWtCLFFBQVEsSUFBSSxLQUFLLE1BQU0sS0FBSyxHQUFHLFFBQVEsTUFBTTtBQUdyRSxRQUFJLGdCQUFnQixTQUFTO0FBQUcsYUFBTztBQUFBO0FBQ2xDLGFBQU87QUFBQTtBQUNOLFdBQU87QUFBQTtBQUdmLE1BQU0sS0FBSyxJQUFJLEtBQUssZUFBZSxtQkFBbUI7QUFBQSxFQUNyRCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUE7QUFHRixNQUFNLHdCQUF3QixJQUFJLFNBQVM7QUFBQSxFQUNqRCxZQUFZO0FBQUEsRUFDWixNQUFNLE9BQW1CLEdBQUcsVUFBVTtBQUNyQyxRQUFJLE9BQXNCLFFBQVE7QUFDbEMsUUFBSSxPQUFPLE1BQU0sU0FBUyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxRQUFRO0FBQUE7QUFHaEIsU0FBSyxNQUFNLElBQUksR0FBRyxPQUFPLElBQUksVUFBVTtBQUV2QyxRQUFJLE9BQU8sTUFBTTtBQUNqQixRQUFJLE1BQU07QUFDVCxVQUFJLE1BQU0sVUFBVSxRQUFRO0FBQzNCLGVBQU8sS0FBSyxLQUFLO0FBQUEsaUJBQ1AsTUFBTSxVQUFVLFFBQVE7QUFDbEMsZUFBTyxLQUFLLE9BQU87QUFBQSxpQkFDVCxNQUFNLFVBQVUsU0FBUztBQUNuQyxlQUFPLEtBQUssSUFBSTtBQUFBO0FBR2pCLFdBQUssTUFBTSxJQUFJO0FBQUE7QUFHaEIsU0FBSyxNQUFNLFdBQVcsR0FBRyxNQUFNO0FBQy9CLFNBQUssTUFBTTtBQUVYO0FBQUE7QUFBQTtBQWdCSyxNQUFNLG9CQUEwQztBQUFBLEVBQ3RELE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQTtBQVVELE1BQU0sU0FBc0M7QUFBQSxFQUNs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
