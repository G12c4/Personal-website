import esbuild from "esbuild";
import npath from "path";
import { fileURLToPath } from "url";
import { getViteTransform } from "./styles.js";
import { parseAstroRequest } from "./query.js";
import { cachedCompilation, invalidateCompilation } from "./compile.js";
import ancestor from "common-ancestor-path";
const FRONTMATTER_PARSE_REGEXP = /^\-\-\-(.*)^\-\-\-/ms;
function astro({ config, logging }) {
  function normalizeFilename(filename) {
    if (filename.startsWith("/@fs")) {
      filename = filename.slice("/@fs".length);
    } else if (filename.startsWith("/") && !ancestor(filename, config.projectRoot.pathname)) {
      filename = new URL("." + filename, config.projectRoot).pathname;
    }
    return filename;
  }
  let viteTransform;
  const srcRootWeb = config.src.pathname.slice(config.projectRoot.pathname.length - 1);
  const isBrowserPath = (path) => path.startsWith(srcRootWeb);
  return {
    name: "@astrojs/vite-plugin-astro",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteTransform = getViteTransform(resolvedConfig);
    },
    async resolveId(id) {
      const { query } = parseAstroRequest(id);
      if (query.astro) {
        if (query.type === "style" && isBrowserPath(id)) {
          const outId = npath.posix.join(config.projectRoot.pathname, id);
          return outId;
        }
        return id;
      }
    },
    async load(id, opts) {
      let { filename, query } = parseAstroRequest(id);
      if (query.astro) {
        if (query.type === "style") {
          if (typeof query.index === "undefined") {
            throw new Error(`Requests for Astro CSS must include an index.`);
          }
          const transformResult = await cachedCompilation(config, normalizeFilename(filename), null, viteTransform, opts);
          const csses = transformResult.css;
          const code = csses[query.index];
          return {
            code
          };
        } else if (query.type === "script") {
          if (typeof query.index === "undefined") {
            throw new Error(`Requests for hoisted scripts must include an index`);
          }
          const transformResult = await cachedCompilation(config, normalizeFilename(filename), null, viteTransform, opts);
          const scripts = transformResult.scripts;
          const hoistedScript = scripts[query.index];
          if (!hoistedScript) {
            throw new Error(`No hoisted script at index ${query.index}`);
          }
          return {
            code: hoistedScript.type === "inline" ? hoistedScript.code : `import "${hoistedScript.src}";`
          };
        }
      }
      return null;
    },
    async transform(source, id, opts) {
      if (!id.endsWith(".astro")) {
        return;
      }
      try {
        const transformResult = await cachedCompilation(config, id, source, viteTransform, opts);
        const { code, map } = await esbuild.transform(transformResult.code, {
          loader: "ts",
          sourcemap: "external",
          sourcefile: id
        });
        return {
          code,
          map
        };
      } catch (err) {
        const scannedFrontmatter = FRONTMATTER_PARSE_REGEXP.exec(source);
        if (scannedFrontmatter) {
          try {
            await esbuild.transform(scannedFrontmatter[1], { loader: "ts", sourcemap: false, sourcefile: id });
          } catch (frontmatterErr) {
            if (frontmatterErr && frontmatterErr.message) {
              frontmatterErr.message = frontmatterErr.message.replace("end of file", "end of frontmatter");
            }
            throw frontmatterErr;
          }
        }
        if (err.stack.includes("wasm-function")) {
          const search = new URLSearchParams({
            labels: "compiler",
            title: "\u{1F41B} BUG: `@astrojs/compiler` panic",
            body: `### Describe the Bug
    
    \`@astrojs/compiler\` encountered an unrecoverable error when compiling the following file.
    
    **${id.replace(fileURLToPath(config.projectRoot), "")}**
    \`\`\`astro
    ${source}
    \`\`\`
    `
          });
          err.url = `https://github.com/withastro/astro/issues/new?${search.toString()}`;
          err.message = `Error: Uh oh, the Astro compiler encountered an unrecoverable error!
    
    Please open
    a GitHub issue using the link below:
    ${err.url}`;
          if (logging.level !== "debug") {
            err.stack = `    at ${id}`;
          }
        }
        throw err;
      }
    },
    async handleHotUpdate(context) {
      invalidateCompilation(config, context.file);
    }
  };
}
export {
  astro as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNLDJCQUEyQjtBQVFsQixlQUFlLEVBQUUsUUFBUSxXQUE0QztBQUNuRiw2QkFBMkIsVUFBa0I7QUFDNUMsUUFBSSxTQUFTLFdBQVcsU0FBUztBQUNoQyxpQkFBVyxTQUFTLE1BQU0sT0FBTztBQUFBLGVBQ3ZCLFNBQVMsV0FBVyxRQUFRLENBQUMsU0FBUyxVQUFVLE9BQU8sWUFBWSxXQUFXO0FBQ3hGLGlCQUFXLElBQUksSUFBSSxNQUFNLFVBQVUsT0FBTyxhQUFhO0FBQUE7QUFFeEQsV0FBTztBQUFBO0FBR1IsTUFBSTtBQUdKLFFBQU0sYUFBYSxPQUFPLElBQUksU0FBUyxNQUFNLE9BQU8sWUFBWSxTQUFTLFNBQVM7QUFDbEYsUUFBTSxnQkFBZ0IsQ0FBQyxTQUFpQixLQUFLLFdBQVc7QUFFeEQsU0FBTztBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsZUFBZSxnQkFBZ0I7QUFDOUIsc0JBQWdCLGlCQUFpQjtBQUFBO0FBQUEsVUFHNUIsVUFBVSxJQUFJO0FBRW5CLFlBQU0sRUFBRSxVQUFVLGtCQUFrQjtBQUNwQyxVQUFJLE1BQU0sT0FBTztBQUloQixZQUFJLE1BQU0sU0FBUyxXQUFXLGNBQWMsS0FBSztBQUNoRCxnQkFBTSxRQUFRLE1BQU0sTUFBTSxLQUFLLE9BQU8sWUFBWSxVQUFVO0FBQzVELGlCQUFPO0FBQUE7QUFHUixlQUFPO0FBQUE7QUFBQTtBQUFBLFVBR0gsS0FBSyxJQUFJLE1BQU07QUFDcEIsVUFBSSxFQUFFLFVBQVUsVUFBVSxrQkFBa0I7QUFDNUMsVUFBSSxNQUFNLE9BQU87QUFDaEIsWUFBSSxNQUFNLFNBQVMsU0FBUztBQUMzQixjQUFJLE9BQU8sTUFBTSxVQUFVLGFBQWE7QUFDdkMsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFHakIsZ0JBQU0sa0JBQWtCLE1BQU0sa0JBQWtCLFFBQVEsa0JBQWtCLFdBQVcsTUFBTSxlQUFlO0FBQzFHLGdCQUFNLFFBQVEsZ0JBQWdCO0FBQzlCLGdCQUFNLE9BQU8sTUFBTSxNQUFNO0FBRXpCLGlCQUFPO0FBQUEsWUFDTjtBQUFBO0FBQUEsbUJBRVMsTUFBTSxTQUFTLFVBQVU7QUFDbkMsY0FBSSxPQUFPLE1BQU0sVUFBVSxhQUFhO0FBQ3ZDLGtCQUFNLElBQUksTUFBTTtBQUFBO0FBR2pCLGdCQUFNLGtCQUFrQixNQUFNLGtCQUFrQixRQUFRLGtCQUFrQixXQUFXLE1BQU0sZUFBZTtBQUMxRyxnQkFBTSxVQUFVLGdCQUFnQjtBQUNoQyxnQkFBTSxnQkFBZ0IsUUFBUSxNQUFNO0FBRXBDLGNBQUksQ0FBQyxlQUFlO0FBQ25CLGtCQUFNLElBQUksTUFBTSw4QkFBOEIsTUFBTTtBQUFBO0FBR3JELGlCQUFPO0FBQUEsWUFDTixNQUFNLGNBQWMsU0FBUyxXQUFXLGNBQWMsT0FBUSxXQUFXLGNBQWM7QUFBQTtBQUFBO0FBQUE7QUFLMUYsYUFBTztBQUFBO0FBQUEsVUFFRixVQUFVLFFBQVEsSUFBSSxNQUFNO0FBQ2pDLFVBQUksQ0FBQyxHQUFHLFNBQVMsV0FBVztBQUMzQjtBQUFBO0FBR0QsVUFBSTtBQUNILGNBQU0sa0JBQWtCLE1BQU0sa0JBQWtCLFFBQVEsSUFBSSxRQUFRLGVBQWU7QUFJbkYsY0FBTSxFQUFFLE1BQU0sUUFBUSxNQUFNLFFBQVEsVUFBVSxnQkFBZ0IsTUFBTTtBQUFBLFVBQ25FLFFBQVE7QUFBQSxVQUNSLFdBQVc7QUFBQSxVQUNYLFlBQVk7QUFBQTtBQUdiLGVBQU87QUFBQSxVQUNOO0FBQUEsVUFDQTtBQUFBO0FBQUEsZUFFTyxLQUFQO0FBU0QsY0FBTSxxQkFBcUIseUJBQXlCLEtBQUs7QUFDekQsWUFBSSxvQkFBb0I7QUFDdkIsY0FBSTtBQUNILGtCQUFNLFFBQVEsVUFBVSxtQkFBbUIsSUFBSSxFQUFFLFFBQVEsTUFBTSxXQUFXLE9BQU8sWUFBWTtBQUFBLG1CQUNyRixnQkFBUDtBQUdELGdCQUFJLGtCQUFrQixlQUFlLFNBQVM7QUFDN0MsNkJBQWUsVUFBVSxlQUFlLFFBQVEsUUFBUSxlQUFlO0FBQUE7QUFFeEUsa0JBQU07QUFBQTtBQUFBO0FBS1IsWUFBSSxJQUFJLE1BQU0sU0FBUyxrQkFBa0I7QUFDeEMsZ0JBQU0sU0FBUyxJQUFJLGdCQUFnQjtBQUFBLFlBQ2xDLFFBQVE7QUFBQSxZQUNSLE9BQU87QUFBQSxZQUNQLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUlKLEdBQUcsUUFBUSxjQUFjLE9BQU8sY0FBYztBQUFBO0FBQUEsTUFFaEQ7QUFBQTtBQUFBO0FBQUE7QUFJRCxjQUFJLE1BQU0saURBQWlELE9BQU87QUFDbEUsY0FBSSxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJYixJQUFJO0FBRUwsY0FBSSxRQUFRLFVBQVUsU0FBUztBQUU5QixnQkFBSSxRQUFRLFVBQVU7QUFBQTtBQUFBO0FBSXhCLGNBQU07QUFBQTtBQUFBO0FBQUEsVUFHRixnQkFBZ0IsU0FBUztBQUU5Qiw0QkFBc0IsUUFBUSxRQUFRO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
