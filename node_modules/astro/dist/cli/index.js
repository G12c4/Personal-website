import * as colors from "kleur/colors";
import fs from "fs";
import yargs from "yargs-parser";
import { z } from "zod";
import { defaultLogDestination } from "../core/logger.js";
import build from "../core/build/index.js";
import devServer from "../core/dev/index.js";
import preview from "../core/preview/index.js";
import { check } from "./check.js";
import { formatConfigError, loadConfig } from "../core/config.js";
function printHelp() {
  console.log(`  ${colors.bold("astro")} - Futuristic web development tool.
  ${colors.bold("Commands:")}
  astro dev             Run Astro in development mode.
  astro build           Build a pre-compiled production version of your site.
  astro preview         Preview your build locally before deploying.
  astro check           Check your project for errors.

  ${colors.bold("Flags:")}
  --config <path>				Specify the path to the Astro config file.
  --project-root <path>			Specify the path to the project root folder.
  --no-sitemap					Disable sitemap generation (build only).
  --experimental-static-build	A more performant build that expects assets to be define statically.
  --drafts                      Include markdown draft pages in the build.
  --verbose						Enable verbose logging
  --silent						Disable logging
  --version						Show the version number and exit.
  --help						Show this help message.
`);
}
async function printVersion() {
  const pkgURL = new URL("../../package.json", import.meta.url);
  const pkg = JSON.parse(await fs.promises.readFile(pkgURL, "utf8"));
  const pkgVersion = pkg.version;
  console.log(pkgVersion);
}
function resolveCommand(flags) {
  if (flags.version) {
    return "version";
  } else if (flags.help) {
    return "help";
  }
  const cmd = flags._[2];
  const supportedCommands = new Set(["dev", "build", "preview", "check"]);
  if (supportedCommands.has(cmd)) {
    return cmd;
  }
  return "help";
}
async function cli(args) {
  const flags = yargs(args);
  const cmd = resolveCommand(flags);
  const projectRoot = flags.projectRoot || flags._[3];
  switch (cmd) {
    case "help":
      printHelp();
      return process.exit(0);
    case "version":
      await printVersion();
      return process.exit(0);
  }
  let logging = {
    dest: defaultLogDestination,
    level: "info"
  };
  if (flags.verbose)
    logging.level = "debug";
  if (flags.silent)
    logging.level = "silent";
  let config;
  try {
    config = await loadConfig({ cwd: projectRoot, flags });
  } catch (err) {
    if (err instanceof z.ZodError) {
      console.error(formatConfigError(err));
    } else {
      console.error(colors.red(err.toString() || err));
    }
    process.exit(1);
  }
  switch (cmd) {
    case "dev": {
      try {
        await devServer(config, { logging });
        await new Promise(() => {
        });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "build": {
      try {
        await build(config, { logging });
        process.exit(0);
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "check": {
      const ret = await check(config);
      return process.exit(ret);
    }
    case "preview": {
      try {
        await preview(config, { logging });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    default: {
      throw new Error(`Error running ${cmd}`);
    }
  }
}
function throwAndExit(err) {
  console.error(colors.red(err.toString() || err));
  process.exit(1);
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NsaS9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUEscUJBQXFCO0FBQ3BCLFVBQVEsSUFBSSxLQUFLLE9BQU8sS0FBSztBQUFBLElBQzFCLE9BQU8sS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1aLE9BQU8sS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjaEIsOEJBQThCO0FBQzdCLFFBQU0sU0FBUyxJQUFJLElBQUksc0JBQXNCLFlBQVk7QUFDekQsUUFBTSxNQUFNLEtBQUssTUFBTSxNQUFNLEdBQUcsU0FBUyxTQUFTLFFBQVE7QUFDMUQsUUFBTSxhQUFhLElBQUk7QUFFdkIsVUFBUSxJQUFJO0FBQUE7QUFJYix3QkFBd0IsT0FBOEI7QUFDckQsTUFBSSxNQUFNLFNBQVM7QUFDbEIsV0FBTztBQUFBLGFBQ0csTUFBTSxNQUFNO0FBQ3RCLFdBQU87QUFBQTtBQUVSLFFBQU0sTUFBTSxNQUFNLEVBQUU7QUFDcEIsUUFBTSxvQkFBb0IsSUFBSSxJQUFJLENBQUMsT0FBTyxTQUFTLFdBQVc7QUFDOUQsTUFBSSxrQkFBa0IsSUFBSSxNQUFNO0FBQy9CLFdBQU87QUFBQTtBQUVSLFNBQU87QUFBQTtBQUlSLG1CQUEwQixNQUFnQjtBQUN6QyxRQUFNLFFBQVEsTUFBTTtBQUNwQixRQUFNLE1BQU0sZUFBZTtBQUMzQixRQUFNLGNBQWMsTUFBTSxlQUFlLE1BQU0sRUFBRTtBQUVqRCxVQUFRO0FBQUEsU0FDRjtBQUNKO0FBQ0EsYUFBTyxRQUFRLEtBQUs7QUFBQSxTQUNoQjtBQUNKLFlBQU07QUFDTixhQUFPLFFBQVEsS0FBSztBQUFBO0FBSXRCLE1BQUksVUFBc0I7QUFBQSxJQUN6QixNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUE7QUFHUixNQUFJLE1BQU07QUFBUyxZQUFRLFFBQVE7QUFDbkMsTUFBSSxNQUFNO0FBQVEsWUFBUSxRQUFRO0FBQ2xDLE1BQUk7QUFDSixNQUFJO0FBQ0gsYUFBUyxNQUFNLFdBQVcsRUFBRSxLQUFLLGFBQWE7QUFBQSxXQUN0QyxLQUFQO0FBQ0QsUUFBSSxlQUFlLEVBQUUsVUFBVTtBQUM5QixjQUFRLE1BQU0sa0JBQWtCO0FBQUEsV0FDMUI7QUFDTixjQUFRLE1BQU0sT0FBTyxJQUFLLElBQVksY0FBYztBQUFBO0FBRXJELFlBQVEsS0FBSztBQUFBO0FBR2QsVUFBUTtBQUFBLFNBQ0YsT0FBTztBQUNYLFVBQUk7QUFDSCxjQUFNLFVBQVUsUUFBUSxFQUFFO0FBRTFCLGNBQU0sSUFBSSxRQUFRLE1BQU07QUFBQTtBQUFBLGVBQ2hCLEtBQVA7QUFDRCxxQkFBYTtBQUFBO0FBR2Q7QUFBQTtBQUFBLFNBR0ksU0FBUztBQUNiLFVBQUk7QUFDSCxjQUFNLE1BQU0sUUFBUSxFQUFFO0FBQ3RCLGdCQUFRLEtBQUs7QUFBQSxlQUNMLEtBQVA7QUFDRCxxQkFBYTtBQUFBO0FBRWQ7QUFBQTtBQUFBLFNBR0ksU0FBUztBQUNiLFlBQU0sTUFBTSxNQUFNLE1BQU07QUFDeEIsYUFBTyxRQUFRLEtBQUs7QUFBQTtBQUFBLFNBR2hCLFdBQVc7QUFDZixVQUFJO0FBQ0gsY0FBTSxRQUFRLFFBQVEsRUFBRTtBQUFBLGVBQ2hCLEtBQVA7QUFDRCxxQkFBYTtBQUFBO0FBRWQ7QUFBQTtBQUFBLGFBR1E7QUFDUixZQUFNLElBQUksTUFBTSxpQkFBaUI7QUFBQTtBQUFBO0FBQUE7QUFNcEMsc0JBQXNCLEtBQVU7QUFDL0IsVUFBUSxNQUFNLE9BQU8sSUFBSSxJQUFJLGNBQWM7QUFDM0MsVUFBUSxLQUFLO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
