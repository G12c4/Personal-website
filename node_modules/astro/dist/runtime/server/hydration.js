var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { valueToEstree } from "estree-util-value-to-estree";
import * as astring from "astring";
import { hydrationSpecifier, serializeListValue } from "./util.js";
const { generate, GENERATOR } = astring;
const customGenerator = __spreadProps(__spreadValues({}, GENERATOR), {
  Literal(node, state) {
    if (node.raw != null) {
      state.write(node.raw.replace("<\/script>", "<\\/script>"));
    } else {
      GENERATOR.Literal(node, state);
    }
  }
});
function serializeProps(value) {
  return generate(valueToEstree(value), {
    generator: customGenerator
  });
}
const HydrationDirectives = ["load", "idle", "media", "visible", "only"];
function extractDirectives(inputProps) {
  let extracted = {
    hydration: null,
    props: {}
  };
  for (const [key, value] of Object.entries(inputProps)) {
    if (key.startsWith("client:")) {
      if (!extracted.hydration) {
        extracted.hydration = {
          directive: "",
          value: "",
          componentUrl: "",
          componentExport: { value: "" }
        };
      }
      switch (key) {
        case "client:component-path": {
          extracted.hydration.componentUrl = value;
          break;
        }
        case "client:component-export": {
          extracted.hydration.componentExport.value = value;
          break;
        }
        case "client:component-hydration": {
          break;
        }
        default: {
          extracted.hydration.directive = key.split(":")[1];
          extracted.hydration.value = value;
          if (HydrationDirectives.indexOf(extracted.hydration.directive) < 0) {
            throw new Error(`Error: invalid hydration directive "${key}". Supported hydration methods: ${HydrationDirectives.map((d) => `"client:${d}"`).join(", ")}`);
          }
          if (extracted.hydration.directive === "media" && typeof extracted.hydration.value !== "string") {
            throw new Error('Error: Media query must be provided for "client:media", similar to client:media="(max-width: 600px)"');
          }
          break;
        }
      }
    } else if (key === "class:list") {
      extracted.props[key.slice(0, -5)] = serializeListValue(value);
    } else {
      extracted.props[key] = value;
    }
  }
  return extracted;
}
async function generateHydrateScript(scriptOptions, metadata) {
  const { renderer, result, astroId, props } = scriptOptions;
  const { hydrate, componentUrl, componentExport } = metadata;
  if (!componentExport) {
    throw new Error(`Unable to resolve a componentExport for "${metadata.displayName}"! Please open an issue.`);
  }
  let hydrationSource = "";
  if (renderer.hydrationPolyfills) {
    hydrationSource += `await Promise.all([${(await Promise.all(renderer.hydrationPolyfills.map(async (src) => `
  import("${await result.resolve(src)}")`))).join(", ")}]);
`;
  }
  hydrationSource += renderer.source ? `const [{ ${componentExport.value}: Component }, { default: hydrate }] = await Promise.all([import("${await result.resolve(componentUrl)}"), import("${await result.resolve(renderer.source)}")]);
  return (el, children) => hydrate(el)(Component, ${serializeProps(props)}, children);
` : `await import("${await result.resolve(componentUrl)}");
  return () => {};
`;
  const hydrationScript = {
    props: { type: "module", "data-astro-component-hydration": true },
    children: `import setup from '${await result.resolve(hydrationSpecifier(hydrate))}';
setup("${astroId}", {${metadata.hydrateArgs ? `value: ${JSON.stringify(metadata.hydrateArgs)}` : ""}}, async () => {
  ${hydrationSource}
});
`
  };
  return hydrationScript;
}
export {
  extractDirectives,
  generateHydrateScript,
  serializeProps
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3J1bnRpbWUvc2VydmVyL2h5ZHJhdGlvbi50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFFQSxNQUFNLEVBQUUsVUFBVSxjQUFjO0FBTWhDLE1BQU0sa0JBQXFDLGlDQUN2QyxZQUR1QztBQUFBLEVBRTFDLFFBQVEsTUFBTSxPQUFPO0FBQ3BCLFFBQUksS0FBSyxPQUFPLE1BQU07QUFHckIsWUFBTSxNQUFNLEtBQUssSUFBSSxRQUFRLGNBQWE7QUFBQSxXQUNwQztBQUNOLGdCQUFVLFFBQVEsTUFBTTtBQUFBO0FBQUE7QUFBQTtBQU9wQix3QkFBd0IsT0FBWTtBQUMxQyxTQUFPLFNBQVMsY0FBYyxRQUFRO0FBQUEsSUFDckMsV0FBVztBQUFBO0FBQUE7QUFJYixNQUFNLHNCQUFzQixDQUFDLFFBQVEsUUFBUSxTQUFTLFdBQVc7QUFjMUQsMkJBQTJCLFlBQTBEO0FBQzNGLE1BQUksWUFBNEI7QUFBQSxJQUMvQixXQUFXO0FBQUEsSUFDWCxPQUFPO0FBQUE7QUFFUixhQUFXLENBQUMsS0FBSyxVQUFVLE9BQU8sUUFBUSxhQUFhO0FBQ3RELFFBQUksSUFBSSxXQUFXLFlBQVk7QUFDOUIsVUFBSSxDQUFDLFVBQVUsV0FBVztBQUN6QixrQkFBVSxZQUFZO0FBQUEsVUFDckIsV0FBVztBQUFBLFVBQ1gsT0FBTztBQUFBLFVBQ1AsY0FBYztBQUFBLFVBQ2QsaUJBQWlCLEVBQUUsT0FBTztBQUFBO0FBQUE7QUFHNUIsY0FBUTtBQUFBLGFBQ0YseUJBQXlCO0FBQzdCLG9CQUFVLFVBQVUsZUFBZTtBQUNuQztBQUFBO0FBQUEsYUFFSSwyQkFBMkI7QUFDL0Isb0JBQVUsVUFBVSxnQkFBZ0IsUUFBUTtBQUM1QztBQUFBO0FBQUEsYUFJSSw4QkFBOEI7QUFDbEM7QUFBQTtBQUFBLGlCQUVRO0FBQ1Isb0JBQVUsVUFBVSxZQUFZLElBQUksTUFBTSxLQUFLO0FBQy9DLG9CQUFVLFVBQVUsUUFBUTtBQUc1QixjQUFJLG9CQUFvQixRQUFRLFVBQVUsVUFBVSxhQUFhLEdBQUc7QUFDbkUsa0JBQU0sSUFBSSxNQUFNLHVDQUF1QyxzQ0FBc0Msb0JBQW9CLElBQUksQ0FBQyxNQUFNLFdBQVcsTUFBTSxLQUFLO0FBQUE7QUFJbkosY0FBSSxVQUFVLFVBQVUsY0FBYyxXQUFXLE9BQU8sVUFBVSxVQUFVLFVBQVUsVUFBVTtBQUMvRixrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUdqQjtBQUFBO0FBQUE7QUFBQSxlQUdRLFFBQVEsY0FBYztBQUVoQyxnQkFBVSxNQUFNLElBQUksTUFBTSxHQUFHLE9BQU8sbUJBQW1CO0FBQUEsV0FDakQ7QUFDTixnQkFBVSxNQUFNLE9BQU87QUFBQTtBQUFBO0FBSXpCLFNBQU87QUFBQTtBQVdSLHFDQUE0QyxlQUFxQyxVQUFpRTtBQUNqSixRQUFNLEVBQUUsVUFBVSxRQUFRLFNBQVMsVUFBVTtBQUM3QyxRQUFNLEVBQUUsU0FBUyxjQUFjLG9CQUFvQjtBQUVuRCxNQUFJLENBQUMsaUJBQWlCO0FBQ3JCLFVBQU0sSUFBSSxNQUFNLDRDQUE0QyxTQUFTO0FBQUE7QUFHdEUsTUFBSSxrQkFBa0I7QUFDdEIsTUFBSSxTQUFTLG9CQUFvQjtBQUNoQyx1QkFBbUIsc0JBQXVCLE9BQU0sUUFBUSxJQUFJLFNBQVMsbUJBQW1CLElBQUksT0FBTyxRQUFnQjtBQUFBLFlBQWUsTUFBTSxPQUFPLFFBQVEsWUFBWSxLQUNsSztBQUFBO0FBQUE7QUFJRixxQkFBbUIsU0FBUyxTQUN6QixZQUFZLGdCQUFnQiwwRUFBMEUsTUFBTSxPQUFPLFFBQVEsNEJBQTRCLE1BQU0sT0FBTyxRQUNwSyxTQUFTO0FBQUEsb0RBRXVDLGVBQWU7QUFBQSxJQUUvRCxpQkFBaUIsTUFBTSxPQUFPLFFBQVE7QUFBQTtBQUFBO0FBSXpDLFFBQU0sa0JBQWtCO0FBQUEsSUFDdkIsT0FBTyxFQUFFLE1BQU0sVUFBVSxrQ0FBa0M7QUFBQSxJQUMzRCxVQUFVLHNCQUFzQixNQUFNLE9BQU8sUUFBUSxtQkFBbUI7QUFBQSxTQUNqRSxjQUFjLFNBQVMsY0FBYyxVQUFVLEtBQUssVUFBVSxTQUFTLGlCQUFpQjtBQUFBLElBQzdGO0FBQUE7QUFBQTtBQUFBO0FBS0gsU0FBTztBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
