{
  "version": 3,
  "sources": ["../@astrojs/renderer-preact/static-html.js", "../@astrojs/renderer-preact/client.js", "dep:@astrojs_renderer-preact_client_js"],
  "sourcesContent": ["import { h } from 'preact';\n\n/**\n * Astro passes `children` as a string of HTML, so we need\n * a wrapper `div` to render that content as VNodes.\n *\n * As a bonus, we can signal to Preact that this subtree is\n * entirely static and will never change via `shouldComponentUpdate`.\n */\nconst StaticHtml = ({ value }) => {\n\tif (!value) return null;\n\treturn h('astro-fragment', { dangerouslySetInnerHTML: { __html: value } });\n};\n\n/**\n * This tells Preact to opt-out of re-rendering this subtree,\n * In addition to being a performance optimization,\n * this also allows other frameworks to attach to `children`.\n *\n * See https://preactjs.com/guide/v8/external-dom-mutations\n */\nStaticHtml.shouldComponentUpdate = () => false;\n\nexport default StaticHtml;\n", "import { h, render } from 'preact';\nimport StaticHtml from './static-html.js';\n\nexport default (element) => (Component, props, children) => render(h(Component, props, children != null ? h(StaticHtml, { value: children }) : children), element);\n", "import d from \"./node_modules/@astrojs/renderer-preact/client.js\";export default d;"],
  "mappings": ";;;;;;;AASA,IAAM,aAAa,CAAC,EAAE,YAAY;AACjC,MAAI,CAAC;AAAO,WAAO;AACnB,SAAO,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,QAAQ;AAAA;AAUjE,WAAW,wBAAwB,MAAM;AAEzC,IAAO,sBAAQ;;;ACpBf,IAAO,iBAAQ,CAAC,YAAY,CAAC,WAAW,OAAO,aAAa,EAAO,EAAE,WAAW,OAAO,YAAY,OAAO,EAAE,qBAAY,EAAE,OAAO,cAAc,WAAW;;;ACHxF,IAAO,4CAAQ;",
  "names": []
}
